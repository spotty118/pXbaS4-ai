//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id               String          @id() @default(uuid())
  name             String?
  email            String?         @unique()
  pictureUrl       String?         @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation  String?
  stripeCustomerId String?
  status           UserStatus      @default(VERIFIED)
  globalRole       String          @default("USER")
  /// @password
  /// @omit
  password         String?
  dateCreated      DateTime        @default(now())
  dateUpdated      DateTime        @default(now()) @updatedAt()
  applications     Application[]   @relation("user")
  notifications    Notification[]  @relation("user")
  supportTickets   SupportTicket[] @relation("user")
  subscriptions    Subscription[]  @relation("user")
}

/// @@allow('all', true)
model Plan {
  id            String         @id() @default(uuid())
  name          String?
  benefits      String?
  price         Float?
  subscriptions Subscription[] @relation("plan")
  dateCreated   DateTime       @default(now())
  dateUpdated   DateTime       @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Application {
  id                String   @id() @default(uuid())
  description       String?
  status            String?
  dockerContainerId String?
  codeUrl           String?
  userId            String?
  user              User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated       DateTime @default(now())
  dateUpdated       DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Notification {
  id          String   @id() @default(uuid())
  message     String?
  isRead      Boolean?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model SupportTicket {
  id          String   @id() @default(uuid())
  subject     String?
  message     String?
  status      String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Subscription {
  id          String   @id() @default(uuid())
  status      String?
  startDate   String?
  endDate     String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  planId      String?
  plan        Plan?    @relation(fields: [planId], references: [id], name: "plan")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}
